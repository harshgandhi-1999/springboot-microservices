server:
  port: 8080
spring:
  application:
    name: "accounts"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: password
  h2:
    console:
      enabled: true
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: "optional:configserver:http://localhost:8071/"    # we use optional tag to run accounts microservice even if it is unable to connect config server
  profiles:
    active: "default"   # set default profile which needs to be activated
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

# Use this to run rabbitmq container:  docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13-management

# expose all actuator endpoints
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true  # will fetch registry details when trying to connect to other microservices
    registerWithEureka: true   # to register this service with eureka server
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "accounts"
    description: "Eazy Bank Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      eazybytes:
        accounts: DEBUG


resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      waitDuration: 100  # set wait duration less than circuit breaker default to use this retry method. for ex set this to 100ms. If we set this greater than circuit breaker default timeout then circuit breaker fallback will be executed instead of ours.
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2